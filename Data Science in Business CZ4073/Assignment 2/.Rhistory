install.packages("Boruta", repos = "https://cran.asia/")
marketData <- read.csv("assign2_MarketData.csv", header = TRUE)
str(marketData)
#install.packages("DMwR", repos = "https://cran.asia/")
#install.packages("tree", repos = "https://cran.asia/")
#install.packages("rpart", repos = "https://cran.asia/")
#install.packages("rpart.plot", repos = "https://cran.asia/")
#install.packages("randomForest", repos = "https://cran.asia/")
#install.packages("Boruta", repos = "https://cran.asia/")
library(DMwR)
library(tree)
library(rpart)
library(rpart.plot)
library(randomForest)
library(Boruta)
marketData <- read.csv("assign2_MarketData.csv", header = TRUE)
str(marketData)
#install.packages("DMwR", repos = "https://cran.asia/")
#install.packages("tree", repos = "https://cran.asia/")
#install.packages("rpart", repos = "https://cran.asia/")
#install.packages("rpart.plot", repos = "https://cran.asia/")
#install.packages("randomForest", repos = "https://cran.asia/")
#install.packages("Boruta", repos = "https://cran.asia/")
library(DMwR)
library(tree)
library(rpart)
library(rpart.plot)
library(randomForest)
library(Boruta)
marketData <- read.csv("assign2_MarketData.csv", header = TRUE)
str(marketData)
summary(marketData)
install.packages(c("DMwR", "rpart.plot"))
install.packages(c("DMwR", "rpart.plot"))
knitr::opts_chunk$set(echo = TRUE)
# Demographic profile = {State, Education, EmploymentStatus, Gender, Location.Code, Marital.Status, Vehicle.Class, Vehicle.Size}
# Insurance Profile = {Customer.Lifetime.Value, Coverage, Income, Monthly.Premium.Auto, Months.Since.Last.Claim, Months.Since.Policy.Inception, Number.of.Open.Complaints, Number.of.Policies, Policy.Type, Policy, Renew.Offer.Type, Sales.Channel, Total.Claim.Account}
insuranceMarketData <- subset(marketData, select = -c(Customer, State, Education, Effective.To.Date, EmploymentStatus, Gender, Location.Code, Marital.Status, Vehicle.Class, Vehicle.Size, Number.of.Open.Complaints))
dim(insuranceMarketData)
names(insuranceMarketData)
str(insuranceMarketData)
insuranceMarketData$Number.of.Policies <- as.factor(insuranceMarketData$Number.of.Policies)
cols <- c("red","green")
plot(insuranceMarketData['Response'], col=cols)
cols <- c("blue","red")
plot(insuranceMarketData['Response'], col=cols)
colors <- c("blue","red")
plot(insuranceMarketData['Response'], col=colors)
# Data Mining with R (DMwR) library to be used for SMOTE
balInsMarketData <- SMOTE(Response ~ ., data = insuranceMarketData, perc.over = 250, perc.under = 150)
# Data Mining with R (DMwR) library to be used for SMOTE
library(DMwR)
balInsMarketData <- SMOTE(Response ~ ., data = insuranceMarketData, perc.over = 250, perc.under = 150)
summary(balInsMarketData)
cols <- c("red","green")
plot(balInsMarketData['Response'], col=cols)
# Data Mining with R (DMwR) library to be used for SMOTE
library(DMwR)
balInsMarketData <- SMOTE(Response ~ ., data = insuranceMarketData, perc.over = 250, perc.under = 150)
summary(balInsMarketData)
cols <- c("red","green")
plot(balInsMarketData['Response'], col=cols)
balInsMarketData <- SMOTE(Response ~ ., data = insuranceMarketData, perc.over = 250, perc.under = 150)
summary(balInsMarketData)
summary(insuranceMarketData)
colors <- c("red","green")
plot(balInsMarketData['Response'], col=colors)
# Performing analysis for categorical data
plot(balInsMarketData$Coverage, balInsMarketData$Response,
xlab="Coverage", ylab="Response", col=cols)
plot(balInsMarketData$Policy.Type, balInsMarketData$Response,
xlab="Policy Type", ylab="Response", col=cols)
plot(balInsMarketData$Policy, balInsMarketData$Response,
xlab="Policy", ylab="Response", col=cols)
plot(balInsMarketData$Renew.Offer.Type, balInsMarketData$Response,
xlab="Renew Offer Type", ylab="Response", col=cols)
plot(balInsMarketData$Number.of.Policies, balInsMarketData$Response,
xlab="Number of Policies", ylab="Response", col=cols)
plot(balInsMarketData$Sales.Channel, balInsMarketData$Response,
xlab="Sales Channel", ylab="Response", col=cols)
plot(balInsMarketData$Coverage, balInsMarketData$Response,
xlab="Coverage", ylab="Response", col=cols)
plot(balInsMarketData$Policy.Type, balInsMarketData$Response,
xlab="Policy Type", ylab="Response", col=cols)
plot(balInsMarketData$Policy, balInsMarketData$Response,
xlab="Policy", ylab="Response", col=cols)
plot(balInsMarketData$Renew.Offer.Type, balInsMarketData$Response,
xlab="Renew Offer Type", ylab="Response", col=cols)
plot(balInsMarketData$Number.of.Policies, balInsMarketData$Response,
xlab="Number of Policies", ylab="Response", col=cols)
plot(balInsMarketData$Sales.Channel, balInsMarketData$Response,
xlab="Sales Channel", ylab="Response", col=cols)
plot(balInsMarketData$Coverage, balInsMarketData$Response,
xlab="Coverage", ylab="Response", col=cols)
(balInsMarketData$Policy.Type, balInsMarketData$Response,
plot(balInsMarketData$Policy.Type, balInsMarketData$Response,
xlab="Policy Type", ylab="Response", col=cols)
plot(balInsMarketData$Policy, balInsMarketData$Response,
xlab="Policy", ylab="Response", col=cols)
(balInsMarketData$Sales.Channel, balInsMarketData$Response,
plot(balInsMarketData$Sales.Channel, balInsMarketData$Response,
xlab="Sales Channel", ylab="Response", col=cols)
plot(balInsMarketData$Number.of.Policies, balInsMarketData$Response,
xlab="Number of Policies", ylab="Response", col=cols)
plot(balInsMarketData$Renew.Offer.Type, balInsMarketData$Response,
xlab="Renew Offer Type", ylab="Response", col=cols)
plot(balInsMarketData$Customer.Lifetime.Value, balInsMarketData$Response, xlab="CLV",
ylab="Response", pch = 19, col = cols[(balInsMarketData$Response)])
plot(balInsMarketData$Customer.Lifetime.Value, balInsMarketData$Response, xlab="CLV",
ylab="Response", pch = 19, col = cols[(balInsMarketData$Response)])
plot(balInsMarketData$Customer.Lifetime.Value, balInsMarketData$Response, xlab="CLV",
ylab="Response", pch = 19, col = cols[(balInsMarketData$Response)])
plot(balInsMarketData$Income, balInsMarketData$Response, xlab="Income",
ylab="Response", pch = 19, col = cols[(balInsMarketData$Response)])
# Performing analysis for continuous data
plot(balInsMarketData$Customer.Lifetime.Value, balInsMarketData$Response, xlab="C_LifetimeVal",
ylab="Response", pch = 19, col = cols[(balInsMarketData$Response)])
plot(balInsMarketData$Income, balInsMarketData$Response, xlab="Income",
ylab="Response", pch = 19, col = cols[(balInsMarketData$Response)])
plot(balInsMarketData$Months.Since.Last.Claim, balInsMarketData$Response, xlab="Months Since Last Claim",
ylab="Response", pch = 19, col = cols[(balInsMarketData$Response)])
plot(balInsMarketData$Monthly.Premium.Auto, balInsMarketData$Response, xlab="Monthly Premium Auto",
ylab="Response", pch = 19, col = cols[(balInsMarketData$Response)])
plot(balInsMarketData$Months.Since.Policy.Inception, balInsMarketData$Response, xlab="Policy Inception",
ylab="Response", pch = 19, col = cols[(balInsMarketData$Response)])
plot(balInsMarketData$Total.Claim.Amount, balInsMarketData$Response, xlab="Total Claim",
ylab="Response", pch = 19, col = cols[(balInsMarketData$Response)])
# second
cdplot(balInsMarketData$Income, balInsMarketData$Response, xlab="Income",
ylab="Response")
cdplot(balInsMarketData$Months.Since.Last.Claim, balInsMarketData$Response, xlab="Months Since Last Claim",
ylab="Response")
cdplot(balInsMarketData$Monthly.Premium.Auto, balInsMarketData$Response, xlab="Monthly Premium Auto",
ylab="Response")
cdplot(balInsMarketData$Months.Since.Policy.Inception, balInsMarketData$Response, xlab="Policy Inception",
ylab="Response")
cdplot(balInsMarketData$Total.Claim.Amount, balInsMarketData$Response, xlab="Total Claim",
ylab="Response")
plot(balInsMarketData$Customer.Lifetime.Value, balInsMarketData$Response, xlab="C_LifetimeVal",
ylab="Response", pch = 19, col = cols[(balInsMarketData$Response)])
plot(balInsMarketData$Income, balInsMarketData$Response, xlab="Income",
ylab="Response", pch = 19, col = cols[(balInsMarketData$Response)])
plot(balInsMarketData$Months.Since.Last.Claim, balInsMarketData$Response, xlab="Months Since Last Claim",
ylab="Response", pch = 19, col = cols[(balInsMarketData$Response)])
plot(balInsMarketData$Monthly.Premium.Auto, balInsMarketData$Response, xlab="Monthly Premium Auto",
ylab="Response", pch = 19, col = cols[(balInsMarketData$Response)])
plot(balInsMarketData$Months.Since.Policy.Inception, balInsMarketData$Response, xlab="Policy Inception",
ylab="Response", pch = 19, col = cols[(balInsMarketData$Response)])
plot(balInsMarketData$Total.Claim.Amount, balInsMarketData$Response, xlab="Total Claim",
ylab="Response", pch = 19, col = cols[(balInsMarketData$Response)])
plot(balancedMarketData$Customer.Lifetime.Value, balancedMarketData$Response, xlab="C_LifetimeVal",
ylab="Response", pch = 19, col = cols[(balancedMarketData$Response)])
# Data Mining with R (DMwR) library to be used for SMOTE
library(DMwR)
balancedMarketData <- SMOTE(Response ~ ., data = insuranceMarketData, perc.over = 250, perc.under = 150)
summary(balancedMarketData)
#summary(insuranceMarketData)
colors <- c("red","green")
plot(balancedMarketData['Response'], col=colors)
plot(balancedMarketData$Customer.Lifetime.Value, balancedMarketData$Response, xlab="C_LifetimeVal",
ylab="Response", pch = 19, col = cols[(balancedMarketData$Response)])
plot(balancedMarketData$Total.Claim.Amount, balancedMarketData$Response, xlab="Total Claim",
ylab="Response", pch = 19, col = cols[(balancedMarketData$Response)])
cdplot(balancedMarketData$Total.Claim.Amount, balancedMarketData$Response, xlab="Total Claim",
ylab="Response")
ratio_TotalClaim_Income= balancedMarketData$Total.Claim.Amount/balancedMarketData$Income
ratio_TotalClaim_Income
ratio_TotalClaim_Income= balancedMarketData$Income/ balancedMarketData$Total.Claim.Amount
ratio_TotalClaim_Income
plot(ratio_Income_TotalClaim, balancedMarketData$Response, xlab="Ratio of income to total claim",
ylab="Response", pch = 19, col = cols[(balancedMarketData$Response)])
ratio_Income_TotalClaim= balancedMarketData$Income/ balancedMarketData$Total.Claim.Amount
plot(ratio_Income_TotalClaim, balancedMarketData$Response, xlab="Ratio of income to total claim",
ylab="Response", pch = 19, col = cols[(balancedMarketData$Response)])
ratio_Income_TotalClaim= balancedMarketData$Income/ balancedMarketData$Total.Claim.Amount
dim(ratio_Income_TotalClaim)
ratio_Income_TotalClaim2=ratio_Income_TotalClaim[-0]
dim(ratio_Income_TotalClaim2)
class(ratio_Income_TotalClaim)
ratio_Income_TotalClaim= balancedMarketData$Income/ balancedMarketData$Total.Claim.Amount
class(ratio_Income_TotalClaim)
length(ratio_Income_TotalClaim)
ratio_Income_TotalClaim2=ratio_Income_TotalClaim[-0]
length(ratio_Income_TotalClaim2)
ratio_Income_TotalClaim2=ratio_Income_TotalClaim[-c(0)]
length(ratio_Income_TotalClaim2)
ratio_Income_TotalClaim2=ratio_Income_TotalClaim[c(ratio_Income_TotalClaim)-c(0)]
length(ratio_Income_TotalClaim2)
ratio_Income_TotalClaim2
ratio_Income_TotalClaim= c(balancedMarketData$Income/ balancedMarketData$Total.Claim.Amount)
class(ratio_Income_TotalClaim)
length(ratio_Income_TotalClaim)
ratio_Income_TotalClaim2=ratio_Income_TotalClaim[!(ratio_Income_TotalClaim) %IN% c(0)]
ratio_Income_TotalClaim2=ratio_Income_TotalClaim[!(ratio_Income_TotalClaim) IN c(0)]
ratio_Income_TotalClaim2=ratio_Income_TotalClaim[!ratio_Income_TotalClaim %in% c(0)]
ratio_Income_TotalClaim2
plot(ratio_Income_TotalClaim2, balancedMarketData$Response, xlab="Ratio of income to total claim",
ylab="Response", pch = 19, col = cols[(balancedMarketData$Response)])
NewMatrixData= rbind(balancedMarketData,ratio_Income_TotalClaim)
NewMatrixData
NewMatrixData= cbind(balancedMarketData,ratio_Income_TotalClaim)
NewMatrixData
NewMatrixData
NewMatrixData <- cbind(balancedMarketData,ratio_Income_TotalClaim)
NewMatrixData
NewMatrixData2= NewMatrixData[NewMatrixData[ratio_Income_TotalClaim] != 0]
NewMatrixData2= NewMatrixData[NewMatrixData[ratio_Income_TotalClaim,] != 0]
NewMatrixData2
NewMatrixData2= NewMatrixData[NewMatrixData[ratio_Income_TotalClaim] != 0,]
NewMatrixData2= NewMatrixData[NewMatrixData[,ratio_Income_TotalClaim] != 0]
NewMatrixData2= NewMatrixData[NewMatrixData[ratio_Income_TotalClaim] != 0]
NewMatrixData2= NewMatrixData[ NewMatrixData[,ratio_Income_TotalClaim] != 0 ,]
NewMatrixData2= NewMatrixData [ NewMatrixData[ratio_Income_TotalClaim] != 0 ,]
NewMatrixData2= NewMatrixData [ !NewMatrixData[ratio_Income_TotalClaim] == 0 ,]
NewMatrixData2= NewMatrixData [ !NewMatrixData[ratio_Income_TotalClaim] == 0 ,]
NewMatrixData2= NewMatrixData [ !NewMatrixData[ratio_Income_TotalClaim] == 0 ,]
NewMatrixData2= NewMatrixData [ !NewMatrixData[ratio_Income_TotalClaim,] == 0 ,]
NewMatrixData2
NewMatrixData2= NewMatrixData [ NewMatrixData[ratio_Income_TotalClaim,] != 0 ,]
NewMatrixData2
zero_indices = which(ratio_Income_TotalClaim==0)
zero_indices
ratio_Income_TotalClaim
ratio_Income_TotalClaim= ratio_Income_TotalClaim[!zero_indices]
ratio_Income_TotalClaim
ratio_Income_TotalClaim= ratio_Income_TotalClaim[!zero_indices]
ratio_Income_TotalClaim
ratio_Income_TotalClaim
ratio_Income_TotalClaim2= ratio_Income_TotalClaim[c[1:length(ratio_Income_TotalClaim)]-zero_indices]
c[1:10]
c(1:10)
ratio_Income_TotalClaim2= ratio_Income_TotalClaim[c(1:length(ratio_Income_TotalClaim))-zero_indices]
ratio_Income_TotalClaim2
ratio_Income_TotalClaim2
c(1:length(ratio_Income_TotalClaim))-zero_indices
ratio_Income_TotalClaim2= ratio_Income_TotalClaim[!c(1:length(ratio_Income_TotalClaim)) %in% zero_indices]
ratio_Income_TotalClaim2
c(1:length(ratio_Income_TotalClaim)) %in% zero_indices
c(1:length(ratio_Income_TotalClaim))
ratio_Income_TotalClaim= c(balancedMarketData$Income/ balancedMarketData$Total.Claim.Amount)
c(1:length(ratio_Income_TotalClaim))
!c(1:length(ratio_Income_TotalClaim)) %in% zero_indices
ratio_Income_TotalClaim2= ratio_Income_TotalClaim[!c(1:length(ratio_Income_TotalClaim)) %in% zero_indices]
ratio_Income_TotalClaim2
plot(ratio_Income_TotalClaim_without0, balancedMarketData$Response[indices_new], xlab="Ratio of income to total claim",
ylab="Response", pch = 19, col = cols[(balancedMarketData$Response[indices_new])])
indices_new= !c(1:length(ratio_Income_TotalClaim)) %in% zero_indices
ratio_Income_TotalClaim_without0= ratio_Income_TotalClaim[indices_new]
ratio_Income_TotalClaim_without0
indices_new= !c(1:length(ratio_Income_TotalClaim)) %in% zero_indices
ratio_Income_TotalClaim_without0= ratio_Income_TotalClaim[indices_new]
Response_withoutZeroRatio= balancedMarketData$Response[indices_new]
Response_withoutZeroRatio
summary(Response_withoutZeroRatio)
plot(ratio_Income_TotalClaim_without0, Response_withoutZeroRatio, xlab="Ratio of income to total claim",
ylab="Response", pch = 19, col = cols[Response_withoutZeroRatio])
indices_new= !(  c(  c(1:length(ratio_Income_TotalClaim)) %in% zero_indices, which(ratio_Income_TotalClaim>400000)  )   )
ratio_Income_TotalClaim_without0= ratio_Income_TotalClaim[indices_new]
Response_withoutZeroRatio= balancedMarketData$Response[indices_new]
summary(Response_withoutZeroRatio)
plot(ratio_Income_TotalClaim_without0, Response_withoutZeroRatio, xlab="Ratio of income to total claim",
ylab="Response", pch = 19, col = cols[Response_withoutZeroRatio])
# Income can be zero but insurance claim and income are not zero simultaneously
ratio_Income_TotalClaim= c(balancedMarketData$Income/ balancedMarketData$Total.Claim.Amount)
zero_indices = c (which(ratio_Income_TotalClaim==0) , which(ratio_Income_TotalClaim>400000) )
#NewMatrixData <- cbind(balancedMarketData,ratio_Income_TotalClaim)
# Removing values that have ration equal zero
indices_new=  !(c(1:length(ratio_Income_TotalClaim)) %in% zero_indices)
Response_withoutZeroRatio= balancedMarketData$Response[indices_new]
#summary(Response_withoutZeroRatio)
plot(ratio_Income_TotalClaim_without0, Response_withoutZeroRatio, xlab="Ratio of income to total claim",
ylab="Response", pch = 19, col = cols[Response_withoutZeroRatio])
ratio_Income_TotalClaim= c(balancedMarketData$Income/ balancedMarketData$Total.Claim.Amount)
zero_indices = c (which(ratio_Income_TotalClaim==0) , which(ratio_Income_TotalClaim>400000) )
indices_new=  !(c(1:length(ratio_Income_TotalClaim)) %in% zero_indices)
Response_withoutZeroRatio= balancedMarketData$Response[indices_new]
indices_new=  !(c(1:length(ratio_Income_TotalClaim)) %in% zero_indices)
Response_withoutZeroRatio= balancedMarketData$Response[indices_new]
ratio_Income_TotalClaim_without0= ratio_Income_TotalClaim[indices_new]
#summary(Response_withoutZeroRatio)
plot(ratio_Income_TotalClaim_without0, Response_withoutZeroRatio, xlab="Ratio of income to total claim",
ylab="Response", pch = 19, col = cols[Response_withoutZeroRatio])
cdplot(balancedMarketData$Income, balancedMarketData$Response, xlab="Income",
ylab="Response")
cdplot(ratio_Income_TotalClaim_without0, Response_withoutZeroRatio, xlab="Ratio of income to total claim",
ylab="Response", pch = 19, col = cols[Response_withoutZeroRatio])
cdplot(ratio_Income_TotalClaim_without0, Response_withoutZeroRatio, xlab="Ratio of income to total claim",
ylab="Response")
cdplot(balancedMarketData$Income, balancedMarketData$Response, xlab="Income",
ylab="Response")
cdplot(balancedMarketData$Months.Since.Last.Claim, balancedMarketData$Response, xlab="Months Since Last Claim",
ylab="Response")
cdplot(balancedMarketData$Monthly.Premium.Auto, balancedMarketData$Response, xlab="Monthly Premium Auto",
ylab="Response")
cdplot(balancedMarketData$Months.Since.Policy.Inception, balancedMarketData$Response, xlab="Policy Inception",
ylab="Response")
cdplot(balancedMarketData$Total.Claim.Amount, balancedMarketData$Response, xlab="Total Claim",
ylab="Response")
plot(balancedMarketData$Customer.Lifetime.Value, balancedMarketData$Response, xlab="C_LifetimeVal",
ylab="Response", pch = 19, col = cols[(balancedMarketData$Response)])
plot(ratio_Income_TotalClaim_without0, Response_withoutZeroRatio, xlab="Ratio of income to total claim",
ylab="Response", pch = 19, col = cols[Response_withoutZeroRatio])
train <- sample(nrow(balancedMarketData), 0.7*nrow(balancedMarketData), replace = FALSE)
TrainData <- balancedMarketData[train,]
TestData <- balancedMarketData[-train,]
library(rpart)
library(rpart.plot)
treeFitModel <- rpart(Response ~ ., data = TrainData, method = 'class', control = rpart.control(cp=0))
PredBase <- predict(treeFitModel, TrainData, type = 'class')
accuracyBase <- mean(PredBase == TestData$Response)
accuracyBase
printcp(treeFitModel)
plotcp(treeFitModel)
printcp(treeFitModel)
plotcp(treeFitModel)
PrePruneM <- rpart(Response ~ ., data = TrainData, method = 'class', control = rpart.control(cp=0, maxdepth = 12,minsplit = 100))
PredBasePrePruned <- predict(PrePruneM, TestData, type = 'class')
accuracyPrePruned <- mean(PredBasePrePruned == TestData$Response)
accuracyPrePruned
PostPruneM <- prune(treeFitModel, cp = 0.00092)
PredBasePostPruned <- predict(PostPruneM, TestData, type = 'class')
accuracyPostPruned <- mean(PredBasePostPruned == TestData$Response)
accuracyPostPruned
library("randomForest")
rfFit <- randomForest(Response ~ .,
data = TrainData,
ntree = 1000,
mtry = 4,
importance = TRUE)
rfFit
predRF <- predict(rfFit, TestData, type="class")
mean(predRF == TestData$Response)
importance(rfFit)
varImpPlot(rfFit)
marketPred <- read.csv("assign2_MarketPred.csv", header = TRUE)
marketPredFiltered = subset(marketPred, select = -c(Customer, State, Education, Effective.To.Date, EmploymentStatus, Gender, Location.Code, Marital.Status, Vehicle.Class, Vehicle.Size, Number.of.Open.Complaints))
marketPredFiltered$Number.of.Policies <- as.factor(marketPredFiltered$Number.of.Policies)
marketPredFiltered$Monthly.Premium.Auto <- as.numeric(marketPredFiltered$Monthly.Premium.Auto)
marketPredFiltered$Income <- as.numeric(marketPredFiltered$Income)
marketPredFiltered$Months.Since.Last.Claim <- as.numeric(marketPredFiltered$Months.Since.Last.Claim)
marketPredFiltered$Months.Since.Policy.Inception <- as.numeric(marketPredFiltered$Months.Since.Policy.Inception)
levels(marketPredFiltered$Policy) <- levels(marketData$Policy)
str(marketPredFiltered)
str(TrainData)
rfP1Pred = predict(rfFit, marketPredFiltered, type="class")
rfP1PredFrame <- data.frame("Response"=rfP1Pred)
write.csv(rfP1PredFrame, "assign2_MarketPred_Insurance.csv", row.names = TRUE)
MarketData_2 <- subset(marketData, select = -c(Customer, Effective.To.Date, Number.of.Open.Complaints))
MarketData_2$Number.of.Policies <- as.factor(MarketData_2$Number.of.Policies)
cols <- c("red","green")
plot(MarketData_2['Response'], col=cols)
cols <- c("red","green")
plot(MarketData_2['Response'], col=cols)
balOvrMarketData <- SMOTE(Response ~ ., data = MarketData_2, perc.over = 250, perc.under = 150)
cols <- c("red","green")
plot(balOvrMarketData['Response'], col=cols)
cols <- c("blue","red")
#plot(MarketData_2['Response'], col=cols)
balOvrMarketData <- SMOTE(Response ~ ., data = MarketData_2, perc.over = 250, perc.under = 150)
plot(balOvrMarketData['Response'], col=cols)
plot(balOvrMarketData$State, balOvrMarketData$Response,
xlab="State", ylab="Response", col=cols)
plot(balOvrMarketData$Coverage, balOvrMarketData$Response,
xlab="Coverage", ylab="Response", col=cols)
plot(balOvrMarketData$Education, balOvrMarketData$Response,
xlab="Education", ylab="Response", col=cols)
plot(balOvrMarketData$EmploymentStatus, balOvrMarketData$Response,
xlab="Employment Status", ylab="Response", col=cols)
plot(balOvrMarketData$Gender, balOvrMarketData$Response,
xlab="Gender", ylab="Response", col=cols)
plot(balOvrMarketData$Location.Code, balOvrMarketData$Response,
xlab="Location Code", ylab="Response", col=cols)
plot(balOvrMarketData$Marital.Status, balOvrMarketData$Response,
xlab="Marital Status", ylab="Response", col=cols)
plot(balOvrMarketData$Policy.Type, balOvrMarketData$Response,
xlab="Policy Type", ylab="Response", col=cols)
plot(balOvrMarketData$Policy, balOvrMarketData$Response,
xlab="Policy", ylab="Response", col=cols)
plot(balOvrMarketData$Renew.Offer.Type, balOvrMarketData$Response,
xlab="Renew Offer Type", ylab="Response", col=cols)
plot(balOvrMarketData$Number.of.Policies, balOvrMarketData$Response,
xlab="Number of Policies", ylab="Response", col=cols)
plot(balOvrMarketData$Sales.Channel, balOvrMarketData$Response,
xlab="Sales Channel", ylab="Response", col=cols)
plot(balOvrMarketData$Vehicle.Class, balOvrMarketData$Response,
xlab="Vehicle Class", ylab="Response", col=cols)
plot(balOvrMarketData$Vehicle.Size, balOvrMarketData$Response,
xlab="Vehicle Size", ylab="Response", col=cols)
train <- sample(nrow(balOvrMarketData), 0.7*nrow(balOvrMarketData), replace = FALSE)
balOvrMarketDataTrain <- balOvrMarketData[train,]
balOvrMarketDataTest <- balOvrMarketData[-train,]
treeFitModel <- rpart(Response ~ ., data = balOvrMarketDataTrain, method = 'class', control = rpart.control(cp=0))
PredBase <- predict(treeFitModel, balOvrMarketDataTest, type = 'class')
accuracyBase <- mean(PredBase == balOvrMarketDataTest$Response)
accuracyBase
printcp(treeFitModel)
plotcp(treeFitModel)
PrePruneM <- rpart(Response ~ ., data = balOvrMarketDataTrain, method = 'class', control = rpart.control(cp=0, maxdepth = 12,minsplit = 100))
PredBasePrePruned <- predict(PrePruneM, balOvrMarketDataTest, type = 'class')
accuracyPrePruned <- mean(PredBasePrePruned == balOvrMarketDataTest$Response)
accuracyPrePruned
PostPruneM <- prune(treeFitModel, cp = 0.00092)
PredBasePostPruned <- predict(PostPruneM, balOvrMarketDataTest, type = 'class')
accuracyPostPruned <- mean(PredBasePostPruned == balOvrMarketDataTest$Response)
accuracyPostPruned
Confusion
predictTest <- predict(treeFitModel, balOvrMarketDataTest, type = 'class')
Confusion <- table(balOvrMarketDataTest$Response, predictTest)
Confusion
accuracyTest <- sum(diag(Confusion))/sum(Confusion)
accuracyTest
predictTestPrePrune <- predict(PrePruneM, balOvrMarketDataTest, type = 'class')
Confusion_pre <- table(balOvrMarketDataTest$Response, predictTestPrePrune)
Confusion_pre
accuracyTestPre <- sum(diag(Confusion_pre))/sum(Confusion_pre)
accuracyTestPre
predictTestPostPrune <- predict(PostPruneM, balOvrMarketDataTest, type = 'class')
Confusion_post <- table(balOvrMarketDataTest$Response, predictTestPostPrune)
Confusion_post
accuracyTestPost <- sum(diag(Confusion_post))/sum(Confusion_post)
accuracyTestPost
rfFit <- randomForest(Response ~ .,
data = balOvrMarketDataTrain,
ntree = 1000,
mtry = 4,
importance = TRUE)
rfFit
predRF <- predict(rfFit, balOvrMarketDataTest, type="class")
mean(predRF == balOvrMarketDataTest$Response)
importance(rfFit)
varImpPlot(rfFit)
#install.packages("Boruta")
library(Boruta)
boruta.bank_train <- Boruta(Response ~ ., data = balOvrMarketDataTrain, doTrace = 2)
print(boruta.bank_train)
marketPred <- read.csv("assign2_MarketPred.csv", header = TRUE)
marketPredFiltered = subset(marketPred, select = -c(Customer, Effective.To.Date, Number.of.Open.Complaints))
marketPredFiltered$Number.of.Policies <- as.factor(marketPredFiltered$Number.of.Policies)
marketPredFiltered$Monthly.Premium.Auto <- as.numeric(marketPredFiltered$Monthly.Premium.Auto)
marketPredFiltered$Income <- as.numeric(marketPredFiltered$Income)
marketPredFiltered$Months.Since.Last.Claim <- as.numeric(marketPredFiltered$Months.Since.Last.Claim)
marketPredFiltered$Months.Since.Policy.Inception <- as.numeric(marketPredFiltered$Months.Since.Policy.Inception)
levels(marketPredFiltered$Policy) <- levels(marketData$Policy)
rfP2Pred = predict(rfFit, marketPredFiltered, type="class")
rfP2PredFrame <- data.frame("Response"=rfP2Pred)
write.csv(rfP2PredFrame, "assign2_MarketPred_Overall.csv", row.names = TRUE)
# Performing analysis for categorical data
plot(balancedMarketData$Coverage, balancedMarketData$Response,
xlab="Coverage", ylab="Response", col=cols)
plot(balancedMarketData$Policy.Type, balancedMarketData$Response,
xlab="Policy Type", ylab="Response", col=cols)
plot(balancedMarketData$Policy, balancedMarketData$Response,
xlab="Policy", ylab="Response", col=cols)
plot(balancedMarketData$Renew.Offer.Type, balancedMarketData$Response,
xlab="Renew Offer Type", ylab="Response", col=cols)
plot(balancedMarketData$Number.of.Policies, balancedMarketData$Response,
xlab="Number of Policies", ylab="Response", col=cols)
plot(balancedMarketData$Sales.Channel, balancedMarketData$Response,
xlab="Sales Channel", ylab="Response", col=cols)
# Performing analysis for categorical data
cols <- c("red","green")
plot(balancedMarketData$Coverage, balancedMarketData$Response,
xlab="Coverage", ylab="Response", col=cols)
plot(balancedMarketData$Policy.Type, balancedMarketData$Response,
xlab="Policy Type", ylab="Response", col=cols)
plot(balancedMarketData$Policy, balancedMarketData$Response,
xlab="Policy", ylab="Response", col=cols)
plot(balancedMarketData$Renew.Offer.Type, balancedMarketData$Response,
xlab="Renew Offer Type", ylab="Response", col=cols)
plot(balancedMarketData$Number.of.Policies, balancedMarketData$Response,
xlab="Number of Policies", ylab="Response", col=cols)
plot(balancedMarketData$Sales.Channel, balancedMarketData$Response,
xlab="Sales Channel", ylab="Response", col=cols)
predRF <- predict(rfFit, TestData, type="class")
library("randomForest")
rfFit <- randomForest(Response ~ .,
data = TrainData,
ntree = 1000,
mtry = 4,
importance = TRUE)
rfFit
predRF <- predict(rfFit, TestData, type="class")
predRF <- predict(rfFit, TestData, type="class")
mean(predRF == TestData$Response)
importance(rfFit)
library("randomForest")
rfFit <- randomForest(Response ~ .,
data = TrainData,
ntree = 1000,
mtry = 4,
importance = TRUE)
rfFit
predRF <- predict(rfFit, TestData, type="class")
mean(predRF == TestData$Response)
importance(rfFit)
predRF <- predict(rfFit, balInsMarketDataTest, type="class")
library("randomForest")
rfFit <- randomForest(Response ~ .,
data = balInsMarketDataTrain,
ntree = 1000,
mtry = 4,
importance = TRUE)
library("randomForest")
rfFit <- randomForest(Response ~ .,
data = TrainData,
ntree = 1000,
mtry = 4,
importance = TRUE)
rfFit
predRF <- predict(rfFit, TestData, type="class")
mean(predRF == TestData$Response)
varImpPlot(rfFit)
